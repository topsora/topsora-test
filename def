import android.annotation.SuppressLint
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.defaultMinSize
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBackIosNew
import androidx.compose.material.icons.filled.BookmarkBorder
import androidx.compose.material.icons.filled.CheckCircleOutline
import androidx.compose.material.icons.filled.Layers
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.RadioButtonChecked
import androidx.compose.material.icons.filled.Satellite
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarData
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.snsh.sample.CustomHalfSheet
import com.snsh.sample.R
import com.snsh.sample.loginscreen.FilledButtonExample
import kotlinx.coroutines.launch


@SuppressLint("CoroutineCreationDuringComposition")
@Composable
fun MapScreen() {
    Scaffold(
        content = { contentPadding ->
            val showDialog = remember { mutableStateOf(false) }
            if (showDialog.value) {
                CustomHalfSheet(name = "ここに家形を遷移しますか？",
                    showDialog = showDialog.value,
                    onDismiss = { showDialog.value = false })
            }

            val snackState = remember { SnackbarHostState() }
            val coroutineScope = rememberCoroutineScope()
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(contentPadding)
            ) {
                Image(
                    modifier = Modifier
                        .fillMaxSize(),
                    contentScale = ContentScale.Crop,
                    painter = painterResource(id = R.drawable.map),
                    contentDescription = ""
                )
                Box(modifier = Modifier.fillMaxSize()) {
                    Column(
                        modifier = Modifier
                            .align(Alignment.BottomEnd),
                        horizontalAlignment = Alignment.End,

                        ) {
                        Card(
                            modifier = Modifier
                                .clip(
                                    RoundedCornerShape(
                                        topStartPercent = 15,
                                        bottomStartPercent = 15
                                    )
                                )
                                .clickable { },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.background,
                            ),
                        ) {
                            Image(
                                modifier = Modifier
                                    .padding(end = 8.dp)
                                    .width(54.dp)
                                    .height(54.dp)
                                    .padding(
                                        6.dp
                                    ),
                                alpha = 0.7f,
                                imageVector = Icons.Filled.Satellite,
                                contentDescription = ""
                            )
                        }
                        Spacer(modifier = Modifier.padding(4.dp))
                        Card(
                            modifier = Modifier
                                .padding(8.dp)
                                .clip(RoundedCornerShape(50))
                                .clickable {
                                },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.background,
                            )
                        ) {
                            Image(
                                modifier = Modifier
                                    .width(54.dp)
                                    .height(54.dp)
                                    .padding(6.dp),
                                alpha = 0.7f,
                                imageVector = Icons.Filled.RadioButtonChecked,
                                contentDescription = ""
                            )
                        }
                        Spacer(modifier = Modifier.padding(1.dp))
                        TextButton(
                            onClick = { }
                        ) {
                            Text("ON/OFF")
                        }
                    }
                }

                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(8.dp)
                ) {
                    Card(
                        modifier = Modifier
                            .align(Alignment.TopStart)
                            .clip(RoundedCornerShape(50))
                            .clickable {
                                showDialog.value = true
                            },
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.background,
                        )
                    ) {
                        Image(
                            modifier = Modifier
                                .width(54.dp)
                                .height(54.dp)
                                .padding(6.dp),
                            alpha = 0.7f,
                            imageVector = Icons.Filled.Menu,
                            contentDescription = ""
                        )
                    }

                    Column(
                        modifier = Modifier
                            .align(Alignment.TopEnd)
                    ) {
                        Card(
                            modifier = Modifier
                                .clip(RoundedCornerShape(50))
                                .clickable {
                                    coroutineScope.launch {
                                        snackState.showSnackbar(
                                            "該当する家形または配置位置をタップしてください",
                                            withDismissAction = true
                                        )
                                    }
                                },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.background,
                            )
                        ) {
                            Image(
                                modifier = Modifier
                                    .width(54.dp)
                                    .height(54.dp)
                                    .padding(6.dp),
                                alpha = 0.7f,
                                imageVector = Icons.Filled.Search,
                                contentDescription = ""
                            )
                        }
                        Spacer(modifier = Modifier.padding(4.dp))
                        Card(
                            modifier = Modifier
                                .clip(RoundedCornerShape(50))
                                .clickable {
                                    coroutineScope.launch {
                                        snackState.showSnackbar("該当する家形または配置位置をタップしてください")
                                    }
                                },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.background,
                            )
                        ) {
                            Image(
                                modifier = Modifier
                                    .width(54.dp)
                                    .height(54.dp)
                                    .padding(6.dp),
                                alpha = 0.7f,
                                imageVector = Icons.Filled.Layers,
                                contentDescription = ""
                            )
                        }
                        Spacer(modifier = Modifier.padding(4.dp))
                        Card(
                            modifier = Modifier
                                .clip(RoundedCornerShape(50))
                                .clickable { },
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.background,
                            )
                        ) {
                            Image(
                                modifier = Modifier
                                    .width(54.dp)
                                    .height(54.dp)
                                    .padding(6.dp),
                                alpha = 0.7f,
                                imageVector = Icons.Filled.BookmarkBorder,
                                contentDescription = ""
                            )
                        }
                    }
                }
                SetupSnackBar(snackState)
            }
        }
    )
}

@Composable
fun SetupSnackBar(snackState: SnackbarHostState) {
    val modifier = Modifier.wrapContentSize()
    Box(
        modifier = modifier
    ) {
        SnackbarHost(
            hostState = snackState,
            modifier = modifier
        ) { snackbarData: SnackbarData ->
            if (snackbarData.visuals.withDismissAction)
                CenterSnackBar(snackbarData.visuals.message)
            else
                CustomSnackBar(snackbarData.visuals.message)
        }
    }
}

@Composable
fun CustomSnackBar(
    message: String
) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(8.dp, 72.dp)
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.TopCenter)
                .alpha(0.5f)
                .clip(
                    RoundedCornerShape(8.dp)
                ),
            colors = CardDefaults.cardColors(
                containerColor = Color.Black,
            ),
        ) {
            Text(
                modifier = Modifier.padding(16.dp),
                text = message,
                color = Color.White,
            )
        }
    }
}

@Composable
fun CenterSnackBar(
    message: String,
) {
    Box(modifier = Modifier.fillMaxSize()) {
        Card(
            modifier = Modifier
                .padding(64.dp)
                .align(Alignment.Center)
                .alpha(0.5f)
                .clip(
                    RoundedCornerShape(8.dp)
                ),
            colors = CardDefaults.cardColors(
                containerColor = Color.Black,
            ),
        ) {
            Column(
                Modifier.padding(horizontal = 32.dp, vertical = 16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    modifier = Modifier
                        .padding(16.dp)
                        .defaultMinSize(72.dp, 72.dp),
                    imageVector = Icons.Filled.CheckCircleOutline,
                    colorFilter = ColorFilter.tint(Color.White),
                    contentDescription = ""
                )
                Text(
                    text = message,
                    color = Color.White
                )
            }
        }
    }
}

data class PostOfficeModel(val name: String, val city: String)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SelectPostOfficeScreen() {
    val postOfficeModels = mutableListOf<PostOfficeModel>()
    postOfficeModels.add(PostOfficeModel("銀座郵便局", "東京都"))
    postOfficeModels.add(PostOfficeModel("青山郵便局", "東京都"))
    postOfficeModels.add(PostOfficeModel("日本橋郵便局", "東京都"))
    postOfficeModels.add(PostOfficeModel("赤坂郵便局", "東京都"))
    postOfficeModels.add(PostOfficeModel("新宿郵便局", "東京都"))

    val (selected, setSelected) = remember { mutableStateOf("") }

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text(text = "郵便局選択", fontWeight = FontWeight.Bold) },
                navigationIcon = {
                    IconButton(onClick = {}) {
                        Icon(Icons.Filled.ArrowBackIosNew, "")
                    }
                },
                modifier = Modifier.fillMaxWidth()
            )
        },
        content = { contentPadding ->
            Column(modifier = Modifier.padding(contentPadding)) {
                Text(
                    text = "利用する郵便局を選択してください。",
                    textAlign = TextAlign.Center,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 32.dp),
                )
                PostOfficeRows(
                    mItems = postOfficeModels,
                    selected,
                    setSelected
                )
//                Debug
//                Text(
//                    text = "Selected Option: $selected",
//                    textAlign = TextAlign.Center,
//                    modifier = Modifier.fillMaxWidth(),
//                )
            }
        },
        bottomBar = {
            FilledButtonExample {

            }
        }
    )


}

@Composable
fun PostOfficeRows(
    mItems: List<PostOfficeModel>,
    selected: String,
    setSelected: (selected: String) -> Unit,
) {
    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        items(mItems) { model ->
            Card(
                modifier = Modifier
                    .padding(8.dp)
                    .clip(
                        RoundedCornerShape(
                            8.dp
                        )
                    )
                    .clickable { setSelected(model.name) },
                border = BorderStroke(2.dp, Color.Gray),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.background,
                ),
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.padding(8.dp)

                ) {
                    val isSelected = selected == model.name
                    RadioButton(
                        modifier = Modifier
                            .padding(start = 16.dp)
                            .weight(1f),
                        selected = isSelected,
                        onClick = { setSelected(model.name) },
                        enabled = true,
                    )
                    Text(
                        text = model.name,
                        fontSize = 20.sp,
                        modifier = Modifier
                            .padding(start = 8.dp)
                            .weight(5f),
                        fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal
                    )
                    Text(
                        text = model.city, modifier = Modifier
                            .padding(start = 8.dp)
                            .weight(2f),
                        color = Color.Gray
                    )
                }
            }
        }
    }
}
